openapi: 3.0.3
info:
  title: Restosaurus API
  version: 1.0.0
  description: A simple restaurant backend created with Django and DRF.
paths:
  /:
    get:
      operationId: root_retrieve
      description: |-
        Display a welcome message.

        Returns:
        --------
        response:
            - success: Response (Rest Framework) containing a welcome message
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: root_create
      description: |-
        Echo the request body.

        Returns:
        --------
        response:
            - success: Response (Rest Framework) containing the request body
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/auth/groups/:
    post:
      operationId: auth_groups_create
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '201':
          description: No response body
  /api/auth/groups/{id}/:
    delete:
      operationId: auth_groups_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyTokenObtainPair'
          description: ''
  /api/auth/register/:
    post:
      operationId: auth_register_create
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          description: No response body
  /api/auth/token-blacklist/:
    post:
      operationId: auth_token_blacklist_create
      description: |-
        Takes a token and blacklists it. Must be used with the
        `rest_framework_simplejwt.token_blacklist` app installed.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBlacklist'
          description: ''
  /api/auth/token-refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/users/:
    get:
      operationId: auth_users_list
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
  /api/menu/categories/:
    get:
      operationId: menu_categories_list
      tags:
      - menu
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
    post:
      operationId: menu_categories_create
      tags:
      - menu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/menu/categories/{id}/:
    get:
      operationId: menu_categories_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - menu
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    put:
      operationId: menu_categories_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - menu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: menu_categories_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - menu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: menu_categories_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - menu
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/menu/items/:
    get:
      operationId: menu_items_list
      tags:
      - menu
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'
          description: ''
    post:
      operationId: menu_items_create
      tags:
      - menu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MenuItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MenuItem'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
          description: ''
  /api/menu/items/{id}/:
    get:
      operationId: menu_items_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - menu
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
          description: ''
    put:
      operationId: menu_items_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - menu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MenuItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MenuItem'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
          description: ''
    patch:
      operationId: menu_items_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - menu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMenuItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMenuItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMenuItem'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
          description: ''
    delete:
      operationId: menu_items_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - menu
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          maxLength: 100
          pattern: ^[-a-zA-Z0-9_]+$
        title:
          type: string
          maxLength: 100
      required:
      - id
      - slug
      - title
    Group:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 150
      required:
      - id
      - name
    MenuItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        stock:
          type: integer
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        price_after_tax:
          type: string
          readOnly: true
        description:
          type: string
        category_id:
          type: integer
          writeOnly: true
        category:
          allOf:
          - $ref: '#/components/schemas/Category'
          readOnly: true
      required:
      - category
      - category_id
      - id
      - price
      - price_after_tax
      - stock
      - title
    MyTokenObtainPair:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
    PatchedCategory:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          maxLength: 100
          pattern: ^[-a-zA-Z0-9_]+$
        title:
          type: string
          maxLength: 100
    PatchedMenuItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        stock:
          type: integer
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        price_after_tax:
          type: string
          readOnly: true
        description:
          type: string
        category_id:
          type: integer
          writeOnly: true
        category:
          allOf:
          - $ref: '#/components/schemas/Category'
          readOnly: true
    TokenBlacklist:
      type: object
      properties:
        refresh:
          type: string
      required:
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
          readOnly: true
      required:
      - groups
      - id
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
